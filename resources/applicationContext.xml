<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"  
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"  
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"  
       xmlns:util="http://www.springframework.org/schema/util" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
       xmlns:cache="http://www.springframework.org/schema/cache"  
       xsi:schemaLocation="  
		    http://www.springframework.org/schema/context  
		    http://www.springframework.org/schema/context/spring-context.xsd  
		    http://www.springframework.org/schema/beans  
		    http://www.springframework.org/schema/beans/spring-beans.xsd  
		    http://www.springframework.org/schema/tx  
		    http://www.springframework.org/schema/tx/spring-tx.xsd  
		    http://www.springframework.org/schema/jdbc  
		    http://www.springframework.org/schema/jdbc/spring-jdbc.xsd  
		    http://www.springframework.org/schema/cache  
		    http://www.springframework.org/schema/cache/spring-cache.xsd  
		    http://www.springframework.org/schema/aop  
		    http://www.springframework.org/schema/aop/spring-aop.xsd  
		    http://www.springframework.org/schema/util  
		    http://www.springframework.org/schema/util/spring-util.xsd ">

	<description>Spring公共配置</description>
	
	<context:annotation-config />
	
	<!-- spring的属性加载器，加载properties文件中的属性 -->
    <context:property-placeholder location="classpath*:/application.properties"/>

	<!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
	<context:component-scan base-package="com.py.zsdApp">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>

	<!-- 数据源配置,使用应用内的Tomcat JDBC连接池 -->
	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close" >
		<!-- Connection Info -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		<property name="maxIdle" value="${jdbc.pool.maxIdle}" />
		<property name="initialSize" value="${jdbc.pool.initialSize}" />
		<property name="maxWait" value="${jdbc.pool.maxWait}" />
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.pool.timeBetweenEvictionRunsMillis}" />
        <property name="minEvictableIdleTimeMillis" value="${jdbc.pool.minEvictableIdleTimeMillis}" />
        <property name="testOnBorrow" value="${jdbc.pool.testOnBorrow}"/>
        <!-- 在连接返回给调用者前用于校验连接是否有效的SQL语句 -->
        <property name="validationQuery" value="${jdbc.pool.validationQuery}"/>
	</bean>
	
	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<!-- <property name="typeAliasesPackage" value="com.hk.pb.entity,com.hk.pb.vo"/> -->
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:/mybatis/*Mapper.xml" />
		
		<!-- 加载mybatis的全局配置文件 -->
        <property name="configLocation" value="classpath:sqlMapConfig.xml" />
		
		<!-- Mybatis分页插件-pagehelper -->
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							dialect=mysql
							reasonable=true
						</value>
					</property>
				</bean>
			</array>
		</property> 
	</bean>
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />
	<!-- DAO接口所在包名，Spring会自动查找其下的类-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.py.zsdApp.dao"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>
	
	 <!-- 事务管理 通知 -->  
    <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
            <!-- 对insert,update,delete 开头的方法进行事务管理,只要有异常就回滚 -->  
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>  
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>  
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>  
            <tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>  
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>  
            <tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>  
            <!-- select,count开头的方法,开启只读,提高数据库访问性能 -->  
            <tx:method name="select*" read-only="true"/>  
            <tx:method name="get*" read-only="true"/>  
            <tx:method name="find*" read-only="true"/>  
            <tx:method name="search*" read-only="true"/>  
            <tx:method name="count*" read-only="true"/>  
            <tx:method name="datagrid*" read-only="true"/>  
            <!-- 对其他方法 使用默认的事务管理 -->  
            <tx:method name="*"/>  
        </tx:attributes>  
    </tx:advice>
    
    <!-- 事务 aop 配置 -->  
    <aop:config>  
        <aop:pointcut id="serviceMethods" expression="execution(* com.py.zsdApp.service..*(..)) and !execution(* com.py.zsdApp.service..*ShiroDbRealm.*(..))"/>  
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>  
    </aop:config>
    
    <!--定义事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
    
	<!-- cacheManager, 指定ehcache.xml的位置 --> 
    <bean id="ehcacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" scope="singleton">
        <property name="configLocation" value="classpath:ehcache.xml"/>
        <property name="shared" value="true"/><!-- 开启缓存共享，与shiro公用ehcache缓存 -->
    </bean>
    
   
   	<!-- 默认是cacheManager -->  
    <bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">    
        <property name="cacheManager" ref="ehcacheManagerFactory"/>
    </bean>
    
	<!-- 注解方式的事务拦截器 开启 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	
	<!-- 定义aspectj,使Spring采用CGLIB代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- hibernate validator -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>
	
</beans>